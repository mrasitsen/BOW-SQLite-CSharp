# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build and Publish 

on:
  workflow_dispatch:


jobs:
  Build-Linux:
    permissions: write-all
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./SQLite-Sharp

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    # - name: Restore dependencies
    #   run: dotnet restore
    - name: Dotnet Publish
      run: |
        sudo apt-get install clang zlib1g-dev
        dotnet publish --self-contained -o "./rel"

  
  # Build Windows:
  #   permissions: write-all
  #   runs-on: windows-latest

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: 9.0.x
  #   - name: Restore dependencies
  #     run: dotnet restore
  #   - name: Restore dependencies
  #     run: dotnet restore  
  #   - name: Dotnet Publish
  #     run: |
  #      cd SQLite-Sharp
  #      dotnet publish ${{ github.workspace }}/SQLite-Sharp --self-contained -o "${{ github.workspace }}\rel"     

    
  # Build Macos:
  #   permissions: write-all
  #   runs-on: macos-latest

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: 9.0.x
  #   - name: Restore dependencies
  #     run: dotnet restore
  #   - name: Dotnet Publish
  #     run: |
  #      cd SQLite-Sharp
  #      dotnet publish ${{ github.workspace }}/SQLite-Sharp --self-contained -o "${{ github.workspace }}\rel"      
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.run_number }}
    #     release_name: Release ${{ github.ref }}
    #     draft: false
    #     prerelease: false
    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     asset_path: ${{ github.workspace }}/rel/SQLite-Sharp
    #     asset_name: SQLite-Sharp
    #     asset_content_type: elf

    # - name: Test
    #   run: dotnet test --no-build --verbosity normal   


